#!/bin/bash
#
# xbps-tpl - Helper script to create new templates for XBPS
#
# Written by Enguerrand de Rochefort <voidlinux@rochefort.de>
# Licensed under the Simplified BSD license (2 clause)
#
####################################################################################

####################################################################################
# General configuration
####################################################################################

VOID_PACKAGES_LOCATION=$HOME/void-packages
BUILD_STYLES_LOCATION=$VOID_PACKAGES_LOCATION/common/build-style
MAINTAINER="Enguerrand de Rochefort <voidlinux@rochefort.de>"
TEMP_FOLDER=/tmp/xbps-tpl-src.tmp
INSPECT_SOURCES="y"

####################################################################################
# Sanity Checks
####################################################################################

if [ ! -d $VOID_PACKAGES_LOCATION ];then
cat << EOF
Directory $VOID_PACKAGES_LOCATION missing!
Please adjust the variable VOID_PACKAGES_LOCATION in the
header of this script!
EOF
exit -1
fi

## TODO: Check void-packages directory structure?

if [ $# -ne 1 ] || [ "x$1" == "x-h" ] || [ "x$1" == "x--help" ];then
    echo "Usage: $(basename $0) <PKG NAME>"
    exit -1
fi

PKG_NAME=$1
if [ -d $PKG_NAME ];then
    echo "Template for package $PKG_NAME already exists!"
    exit -1
fi

####################################################################################
# Functions to guess sane defaults
####################################################################################

function guess_wrksrc() {
    local build_style=$1
    case "$build_style" in 
        'perl-module')
            echo '${pkgname#*-}-${version}'
            ;;
        *)
            echo '${pkgname}-${version}'
    esac
}

function guess_hostmakedepends() {
    local build_style=$1
    case "$build_style" in 
        'perl-module')
            echo ''
            ;;
        'perl-ModuleBuild')
            echo ''
            ;;
        *)
            echo ''
    esac
}

function guess_makedepends() {
    local build_style=$1
    case "$build_style" in 
        'perl-module')
            echo 'perl'
            ;;
        'perl-ModuleBuild')
            echo 'perl perl-Module-Build'
            ;;
        *)
            echo ''
    esac
}

function guess_depends() {
    local build_style=$1
    case "$build_style" in 
        'perl-module')
            echo 'perl'
            ;;
        'perl-ModuleBuild')
            echo 'perl'
            ;;
        *)
            echo ''
    esac
}

function guess_distfiles() {
    local src_link=$1
    local pkg_name=$2
    local pkg_version=$3
    
    echo $src_link | \
            sed -e "s#$pkg_name#\${pkgname}#g" | \
            sed -e "s#$pkg_version#\${version}#g" | \
            sed -re "s#http://(www.|)cpan.(perl.|)org/modules/by-module#\$CPAN_SITE#g" | \
            sed -re "s#http://ftp.debian.org/debian/pool#\$DEBIAN_SITE#g" | \
            sed -re "s#http://(www.|)freedesktop.org/software#\$FREEDESKTOP_SITE#g" | \
            sed -re "s#http://ftp.gnome.org/pub/(GNOME|gnome)/sources#\$GNOME_SITE#g" | \
            sed -re "s#http://mirrors.kernel.org/gnu#\$GNU_SITE#g" | \
            sed -re "s#http://(www.|)kernel.org/pub/linux#\$KERNEL_SITE#g" | \
            sed -re "s#http://ftp.mozilla.org/pub/mozilla.org#\$MOZILLA_SITE#g" | \
            sed -re "s#http://(www.|)download.savannah.nongnu.org/releases#\$NONGNU_SITE#g" | \
            sed -re "s#http://pypi.python.org/packages/source#\$PYPI_SITE#g" | \
            sed -re "s#http://downloads.sourceforge.net/sourceforge#\$SOURCEFORGE_SITE#g" | \
            sed -re "s#http://(www.|)archive.ubuntu.com/ubuntu/pool#\$UBUNTU_SITE#g" | \
            sed -re "s#http://xorg.freedesktop.org/wiki/#\$XORG_HOME#g" | \
            sed -re "s#http://xorg.freedesktop.org/releases/individual#\$XORG_SITE#g"
}

function guess_architecture_option(){
    local build_style=$1
    case "$build_style" in 
        'perl-module')
            echo 'noarch=yes'
            ;;
        'perl-ModuleBuild')
            echo 'noarch=yes'
            ;;
        *)
            echo '#noarch=yes'
    esac
}

####################################################################################
# Get User Input
####################################################################################

read -p "Version: " PKG_VERSION
read -p "Source Link: " SRC_LINK
declare -A BUILD_STYLES
INDEX=1
echo "Choose build style: "
for FILE in $BUILD_STYLES_LOCATION/*; do
    SCRIPT=${FILE##*/}
    if [ "$SCRIPT" == "README" ];then
        continue
    fi
    STYLE=${SCRIPT%.*}
    BUILD_STYLES[$INDEX]=$STYLE
    echo ${INDEX}") "${STYLE}
    INDEX=$[ $INDEX + 1 ]
done
read -p "Selection: " SELECTED_STYLE_INDEX
SELECTED_STYLE=${BUILD_STYLES[$SELECTED_STYLE_INDEX]}

####################################################################################
# Get sources and let user inspect them
####################################################################################

if [ "x${INSPECT_SOURCES}" == "xy" ];then
    mkdir -p $TEMP_FOLDER
    cd $TEMP_FOLDER
    rm -rf ./*
    echo "Fetching source, please wait..."
    wget $SRC_LINK
    TARBALL=${SRC_LINK##*\/}
    CHECKSUM=$(sha256sum $TARBALL | cut -d' ' -f 1)
    EXTENSION=${TARBALL##*.}
    COMPRESSION_IDENTIFIED="y"
    case "$EXTENSION" in
        'gz')
            TAROPT='z'
            ;;
        'xz')
            TAROPT='J'
            ;;
        'bzip2')
            TAROPT='j'
            ;;
        *)
            COMPRESSION_IDENTIFIED="n"  
            ;;
    esac
    if [ "x${COMPRESSION_IDENTIFIED}" == "xy" ];then
        tar -xv${TAROPT}f $TARBALL
        EXTRACT_DIR=$(echo $TARBALL | sed -e 's/.tar.${EXTENSION}//g')
        if [ ! -d $EXTRACT_DIR ];then
            EXTRACT_DIR=$(ls | grep -v $TARBALL)
        fi    
        # While we are at it, guess the wrksrc
        if [ -d $EXTRACT_DIR ];then 
            WRKSRC=$(echo $EXTRACT_DIR | \
                sed -e "s#$PKG_NAME#\${pkgname}#g" | \
                sed -e "s#$PKG_VERSION#\${version}#g")
        fi
    fi
    echo ""
    echo "You will now be dropped into a shell to inspect the sources"
    echo "Press ctrl-D to proceed"
    echo ""
    /bin/bash
else
    echo "Fetching source to compute sha256sum, please wait..."
    CHECKSUM=$(curl -s $SRC_LINK | sha256sum | cut -d' ' -f 1)
fi

####################################################################################
# Process User Input to prepare Template Creation
####################################################################################

PKGSRC_DIR=$VOID_PACKAGES_LOCATION/srcpkgs/$PKG_NAME

WRKSRC=${WRKSRC:=$(guess_wrksrc $SELECTED_STYLE)}
HOSTMAKEDEPENDS=$(guess_hostmakedepends $SELECTED_STYLE)
MAKEDEPENDS=$(guess_makedepends $SELECTED_STYLE)
DEPENDS=$(guess_depends $SELECTED_STYLE)
DISTFILES=$(guess_distfiles $SRC_LINK $PKG_NAME $PKG_VERSION)
ARCH_OPTION=$(guess_architecture_option $SELECTED_STYLE)

####################################################################################
# Build Template
####################################################################################

mkdir -p $PKGSRC_DIR
cat > $PKGSRC_DIR/template << EOF
# Template build file for '$PKG_NAME'.
pkgname=$PKG_NAME
version=$PKG_VERSION
revision=1
wrksrc="${WRKSRC}"
build_style=$SELECTED_STYLE
hostmakedepends="$HOSTMAKEDEPENDS"
makedepends="$MAKEDEPENDS"
depends="$DEPENDS"
short_desc=''
maintainer="$MAINTAINER"
homepage=""
license=""
distfiles="$DISTFILES"
checksum=$CHECKSUM
$ARCH_OPTION
EOF

####################################################################################
# Finally open it in Editor
####################################################################################

${EDITOR:-vi} $PKGSRC_DIR/template
